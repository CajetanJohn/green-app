{"version":3,"file":"static/js/802.2f340282.chunk.js","mappings":"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","sources":["materials/input.js","pages/authentication/Signup.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Icon from '../assets/icons/icon';\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false,\n      value: this.props.value // State to store input value\n    };\n  }\n\n  // Update the state when the value prop changes\n  componentDidUpdate(prevProps) {\n    if (prevProps.value !== this.props.value) {\n      this.setState({ value: this.props.value });\n    }\n  }\n\n  togglePasswordVisibility = () => {\n    this.setState(prevState => ({\n      showPassword: !prevState.showPassword\n    }));\n  };\n\n  handleInputChange = (e) => {\n    const { value } = e.target;\n    this.setState({ value });\n\n    // Call the callback function passed from the parent component\n    if (this.props.onChange) {\n      this.props.onChange(this.props.name, value);\n    }\n  };\n\n  render() {\n    // Accessing props passed down from the parent component\n    const { id, labelText, type, required, error, ...rest } = this.props;\n    const { showPassword } = this.state;\n\n    // Determine if error is an array or a string\n    const errorMessages = Array.isArray(error) ? error : [error];\n\n    return (\n      <>\n        <div className=\"input-field\">\n          <input\n            className={`input ${error ? 'invalid' : 'valid'}`} // Apply invalid class if there is an error\n            type={type === 'password' && showPassword ? 'text' : type}\n            id={id}\n            {...rest}\n            required={required}\n            value={this.state.value}\n            onChange={this.handleInputChange}\n          />\n          {type === 'password' && (showPassword ?\n            (<div className='icon-container'><Icon name=\"hide\" onClick={this.togglePasswordVisibility} style={{ position: 'absolute', top: '50%', right: '0', transform: 'translate(100%, -50%)' }} /></div>)\n            : (<div className='icon-container'><Icon name=\"show\" onClick={this.togglePasswordVisibility} style={{ position: 'absolute', top: '50%', right: '0', transform: 'translate(100%, -50%)' }}/></div>)\n          )}\n          <label htmlFor={id}>{labelText}</label>\n          <style>\n          {`\n            .input-field {\n              position: relative;\n              width: 100%;\n              min-height: 44px;\n              height:fit-content;\n              line-height: 44px;\n              margin-top: 20px;\n              background:none;\n              border:2px solid black;\n              border-radius:25px;\n              background:white;\n            }\n            .input-field label {\n              position: absolute;\n              top: 50%;\n              transform:translateY(-50%);\n              left: 10px;\n              width: fit-content;\n              color: var(--txtc);\n              transition: 0.2s all;\n              cursor: text;\n              pointer-events:none;\n              font-size:1rem;\n              background:white;\n              height:fit-content;\n              line-height:1;\n            }\n            .input-field .input {\n              width: calc(100% - 1rem);\n              border: 0;\n              outline: 0;\n              padding: 0.5rem;\n              border-bottom: 2px solid var(--txtc);\n              box-shadow: none;\n              color: var(--txtc);\n              background:none;\n              font-size: 0.8rem;\n              background-color:none;\n              box-shadow:transparent;\n            }\n            .input-field .input.invalid {\n              outline: 0;\n              color: var(--invalid-txtc);\n              border-color: var(--invalid-txtc);\n            }\n            .input-field .input:focus,\n            .input-field .input.valid {\n              border-color: var(--txtc);\n            }\n\n            .input-field .input:focus ~ label{\n              top: 0;\n            }\n\n            .input-field .input:focus.valid ~ label,\n            .input-field .input:valid ~ label {\n              font-size: 1rem;\n              top: 0;\n              color: var(--txtc);\n            }\n\n            .input-field .input.invalid ~ span{\n              display:none;\n              margin:0;\n              line-height:normal;\n            }\n\n            .input-field .input:focus.invalid ~ span {\n              color:var(--invalid-txtc);\n              display:block;\n            }\n            .input-field .input:focus.invalid ~ label {\n              color: var(--invalid-txtc);\n            }\n            .input-field .icon-container{\n              position:absolute;\n              bottom:50%;\n              right: 30px;\n              z-index:1;\n              height:100%;\n              padding:0 5px;\n              transform:translateY(50%);\n            }\n            .input-field .error{\n              color: var(--invalid-txtc);\n              font-size:0.6rem;\n            }\n            .input-field .feedBack{\n              color:var()\n            }\n          `}\n        </style>\n        </div>\n        {errorMessages.map((errorMessage, index) => (\n          <span key={index} className=\"error\">{errorMessage}</span>\n        ))}\n      </>\n    );\n  }\n}\n\n\nexport default Input;","import React, { useState } from \"react\";\nimport \"../../assets/styles/login.css\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport PrimaryButton from '../../materials/pr-btn';\nimport Input from '../../materials/input';\nimport { Link } from 'react-router-dom'; \n\nconst RegisterPage = () => {\n    const [auth, setAuth] = useState(true);\n    const [email, setEmail] = useState('');\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const[text, setText] = useState('')\n    const navigate = useNavigate();\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (auth) {\n            // Here, you can handle the user registration logic\n            setAuth(true);\n            navigate('/login');\n        }\n    };\n\n    return (\n        <div className=\"page-container\">\n            <div className=\"welcome-message\">\n                <div className=\"greebin-trademark\">\n                    <span className=\"welcome-to\">Welcome to</span>\n                    <h1 className=\"greenbin\">GreenBin</h1>\n                </div>\n                <div className=\"suggestive-message\">\n                    <span>How do you manage your waste? <br /> If not, then start from here</span>\n                </div>\n            </div>\n\n            <div className='form'>\n                <form className='sign-in-form' noValidate onSubmit={handleSubmit}>\n                    <Input \n                        type='text' \n                        id=\"email\" \n                        name=\"email\" \n                        labelText=\"Email\" \n                        required={true} \n                        value={email} \n                        onChange={(name, value) => setEmail(value)} \n                    />\n                    <Input \n                        type='text' \n                        id=\"username\" \n                        name=\"username\" \n                        labelText=\"Username\" \n                        required={true} \n                        value={username} \n                        onChange={(name, value) => setUsername(value)} \n                    />\n                    <Input \n                        type='password' \n                        id=\"password\" \n                        name=\"password\" \n                        labelText=\"Password\" \n                        required={true} \n                        value={password} \n                        onChange={(name, value) => setPassword(value)} \n                    />\n                    <Input \n                        type='password' \n                        id=\"confirmPassword\" \n                        name=\"confirmPassword\" \n                        labelText=\"Confirm Password\" \n                        required={true} \n                        value={confirmPassword} \n                        onChange={(name, value) => setConfirmPassword(value)} \n                    />\n                    <Input \n                        type='text' \n                        id=\"text\" \n                        name=\"text\" \n                        labelText=\"Text\" \n                        required={true} \n                        value={text} \n                        onChange={(name, value) => setText(value)} \n                    />\n\n                    <div className='forgot-password-div'></div>\n                    <div className=\"login-button\">\n                        <PrimaryButton type=\"submit\">Register</PrimaryButton>\n                    </div>\n                </form>\n                <div className='sign-navigation-btn'>\n                    Already have an account? <Link to=\"/login\">Login</Link>\n                </div>             \n            </div>\n        </div>\n    );\n};\n\nexport default RegisterPage;\n"],"names":["Input","React","constructor","props","super","togglePasswordVisibility","this","setState","prevState","showPassword","handleInputChange","e","value","target","onChange","name","state","componentDidUpdate","prevProps","render","id","labelText","type","required","error","rest","errorMessages","Array","isArray","_jsxs","_Fragment","children","className","_jsx","concat","Icon","onClick","style","position","top","right","transform","htmlFor","map","errorMessage","index","RegisterPage","auth","setAuth","useState","email","setEmail","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","text","setText","navigate","useNavigate","noValidate","onSubmit","preventDefault","PrimaryButton","Link","to"],"sourceRoot":""}